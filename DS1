/**
 * main.c
 */


#include "F28x_Project.h"
#include "F2837xD_sdfm_drivers.h"
#include "math.h"

#define BLINKY_LED_GPIO    110
const float pi = 3.14159265359;
//
// Function Prototypes
//
__interrupt void cpu_timer0_isr(void);
__interrupt void cpu_timer1_isr(void);
__interrupt void cpu_timer2_isr(void);





//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main(void)
{
    /*CPU1 Emulation Boot Flow; 32 bit wide register named EMUBOOTCTRL located at 0xD00; go to the ram with the programer conecterd xds100v3+*/
    Uint32 *emubootctrl;
    emubootctrl = (Uint32 *)0xD00;
    EALLOW;
    *emubootctrl = 0x0B5A;
    EDIS;

    memcpy(&RamfuncsRunStart, &RamfuncsLoadStart, (size_t)&RamfuncsLoadSize);
    ///////////////////////////////////////////////////////////////////////////////////////////////
    InitFlash();
    //
    // Step 1. Initialize System Control:
    // PLL, WatchDog, enable Peripheral Clocks
    // This example function is found in the F2837xD_SysCtrl.c file.
    InitSysCtrl();
    //
    //
    // Step 3. Clear all interrupts and initialize PIE vector table:
    // Disable CPU interrupts
    DINT;
    // Initialize the PIE control registers to their default state.
    // The default state is all PIE interrupts disabled and flags
    // are cleared.
    // This function is found in the F2837xD_PieCtrl.c file.
    InitPieCtrl();
    // Disable CPU __interrupts and clear all CPU __interrupt flags:
    IER = 0x0000;
    IFR = 0x0000;
    // Initialize the PIE vector table with pointers to the shell Interrupt
    // Service Routines (ISR).
    // This will populate the entire table, even if the __interrupt
    // is not used in this example.  This is useful for debug purposes.
    // The shell ISR routines are found in F2837xD_DefaultIsr.c.
    // This function is found in F2837xD_PieVect.c.
    InitPieVectTable();
    //TheInterruptionService Request (ISR)  of  Timer0 is  used  as  the main  clock  for  the  program.
    //The  ISR  is  a  C  function,  independent of the  main  function in  the  DSP  algorithm.
    //It  needs to  be  declared  and  defined separately and  is  executed  on  the basis  of  regular  interruptions  of  Timer0
    // Interrupts that are used in this example are re-mapped to
    //ISR functions found within this file.
    EALLOW;  // This is needed to write to EALLOW protected registers
    PieVectTable.TIMER0_INT = &cpu_timer0_isr;
    PieVectTable.TIMER1_INT = &cpu_timer1_isr;
    PieVectTable.TIMER2_INT = &cpu_timer2_isr;
    EDIS;    // This is needed to disable write to EALLOW protected registers
    //
    //
    // Step 4. Initialize the Device Peripheral. This function can be
    //         found in F2837xD_CpuTimers.c
    InitCpuTimers();   // For this example, only initialize the Cpu Timers
     // Configure CPU-Timer 0 to __interrupt every 50 milliseconds:
    // 60MHz CPU Freq, 50 millisecond Period (in uSeconds)
    ConfigCpuTimer(&CpuTimer0, 60, 5000000);
    ConfigCpuTimer(&CpuTimer1, 60, 10000000);
    ConfigCpuTimer(&CpuTimer2, 60, 15000000);
    // To ensure precise timing, use write-only instructions to write to the entire
    // register. Therefore, if any of the configuration bits are changed in
    // ConfigCpuTimer and InitCpuTimers (in F2837xD_cputimervars.h), the below
    // settings must also be updated.
    CpuTimer0Regs.TCR.all = 0x4001;//CPUTIMER_REGS Registers CPU-Timer, Control Register
    CpuTimer1Regs.TCR.all = 0x4000;
    CpuTimer2Regs.TCR.all = 0x4000;
    //
    // Step 5. User specific code, enable __interrupts:
    // Configure GPIO34 as a GPIO output pin
   //Initialize GPIO:
    // This example function is found in the F2837xS_Gpio.c file and
    // illustrates how to set the GPIO to it's default state.
    //
    InitGpio();
    GPIO_SetupPinMux(110, GPIO_MUX_CPU1, 0);
    GPIO_SetupPinMux(111, GPIO_MUX_CPU1, 0);
    GPIO_SetupPinMux(112, GPIO_MUX_CPU1, 0);
    GPIO_SetupPinOptions(110, GPIO_OUTPUT, GPIO_PUSHPULL);
    GPIO_SetupPinOptions(111, GPIO_OUTPUT, GPIO_PUSHPULL);
    GPIO_SetupPinOptions(112, GPIO_OUTPUT, GPIO_PUSHPULL);

    // Enable CPU INT1 which is connected to CPU-Timer 0:
    // Enable CPU int1 which is connected to CPU-Timer 0, CPU int13
    // which is connected to CPU-Timer 1, and CPU int 14, which is connected
    // to CPU-Timer 2:
     IER |= M_INT1;
     IER |= M_INT13;
     IER |= M_INT14;
    // Enable TINT0 in the PIE: Group 1 __interrupt 7
    PieCtrlRegs.PIEIER1.bit.INTx7 = 1;
    // Enable global Interrupts and higher priority real-time debug events:
    EINT;   // Enable Global __interrupt INTM
    ERTM;   // Enable Global realtime __interrupt DBGM

    GPIO_SetupPinMux(122, GPIO_MUX_CPU1, 7);
    GPIO_SetupPinOptions(122, GPIO_INPUT, GPIO_ASYNC);
    GPIO_SetupPinMux(123, GPIO_MUX_CPU1, 7);
    GPIO_SetupPinOptions(123, GPIO_INPUT, GPIO_ASYNC);

    Sdfm_configureInputCtrl(SDFM1, FILTER1, MODE_0);
    Sdfm_configureData_filter(SDFM1, FILTER1, FILTER_ENABLE, SINC3,
                              OSR_200, DATA_16_BIT, SHIFT_8_BITS);
    Sdfm_enableMFE(SDFM1);
 /////////////////////////////////////////////////////////////////////////


    EALLOW;
    DacaRegs.DACOUTEN.bit.DACOUTEN = 1;
    DacbRegs.DACOUTEN.bit.DACOUTEN = 1;
    DaccRegs.DACOUTEN.bit.DACOUTEN = 1;
    EDIS;

    static float ds_val;

    while(1)
    {
        static float angle;
        angle += 0.0001*50*pi*2;
        if(angle >= 2*pi) angle -= 2*pi;
        float dacval = (sinf(angle)+1)*(float)0xFFF*0.5f;
        DacbRegs.DACVALS.all = (Uint16)dacval;
        DELAY_US(100);
        // *0.000032 = 1/(200*200*200/256) 256 -> shift 8 bits
        // *0.0625V modulator range
        // /0.002Ohm resistor
        ds_val = (*(volatile int16_t *)0x5E17)*(0.001);
    }
	return 0;
}







//
// cpu_timer0_isr - CPU Timer0 ISR that toggles GPIO32 once per 500ms
//
__interrupt void cpu_timer0_isr(void)
{
   CpuTimer0.InterruptCount++;
   GpioDataRegs.GPDTOGGLE.bit.GPIO110 = 1;

   // Acknowledge this __interrupt to receive more __interrupts from group 1
   //
   PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;//PIE: Peripheral Interrupt Expansion module
}
//
// cpu_timer1_isr - CPU Timer1 ISR
//
__interrupt void cpu_timer1_isr(void)
{
   CpuTimer1.InterruptCount++;
   GpioDataRegs.GPDTOGGLE.bit.GPIO111 = 1;
}
//
// cpu_timer2_isr CPU Timer2 ISR
//
__interrupt void cpu_timer2_isr(void)
{
   CpuTimer2.InterruptCount++;
   GpioDataRegs.GPDTOGGLE.bit.GPIO112 = 1;
}
